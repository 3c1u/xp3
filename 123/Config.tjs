// Config.tjs - KAG!設定
// Copyright (C) 2001-2003 W.Dee  改変・配布は自由です
;global.config_version = ""; // この行を消さないでください

// このファイル内で設定できる項目は、すべて
// ;設定名 = 値;
// の形式になっています。
// 「追加の設定」を除いて、設定は各項目につき１行で記述する必要があります。


//------------------------------------------------------- 全体の設定 -----


// ◆ タイトル
// ウィンドウのキャプション(タイトル)および
// タスクバーに表示されるものです。
;System.title = "Fate/stay night";

// ◆ シナリオ解析モード
// シナリオファイル中の改行に従わせたい場合に false を設定します。
// false を指定すると、KAG のシナリオ中の改行が、行末に \ または [p] を書か
// ない限りそのままメッセージレイヤ上での改行として扱われます。
// true を設定すると [r] タグを書かない限り改行されません。
// KAG2.x 互換にするには false を指定してください。
;global.ignoreCR = true;


// ◆ 画像キャッシュ制限
// 画像キャッシュの制限値を MB 単位で指定します。
// gcsAuto を指定すると、自動的に決定されます。
;System.graphicCacheLimit = gcsAuto; // 画像キャッシュ制限


// ◆ global 追加の設定
// 追加の設定項目がある場合は
// [start-global-additionals] と [end-global-additionals] で囲まれた
// 部分に設定を記述してください
// ( [start-global-additionals] と [end-global-additionals] の行は
//  編集したり消したりしないでください )

//[start-global-additionals]

//[end-global-additionals]




//-------------------------------------------- ウィンドウや動作の設定 -----

function KAGWindow_config()
{
// ◆ 画面サイズ
// scWidth に画面の幅、scHeight に画面の高さをピクセル単位で指定します。
// 標準的に使われている 640x480 や 800x600 のような画面サイズではないサイズ
// に設定すると、フルスクリーンにできない場合があります。
;scWidth = 800;
;scHeight = 600;

// ◆ 読みとり専用モード
// readOnlyMode = true とすると、ディスクへのいっさいの書き込み動作をしなく
// なります。CD-ROM 上から実行させるときなどに指定してください。
// もちろん、その場合は栞の保存などができなくなります。
;readOnlyMode = false;

// ◆ フリーセーブ
// 栞の保存形式を指定します。
// false を指定すると、メニューバーの「栞をたどる」「栞をはさむ」の
// サブメニュー項目からセーブデータを保存したり読み込んだりします。
// この場合は保存可能な栞の最大の個数は numBookMarks によって制限
// されます。
// true を指定するとフリーセーブモードになり、「栞をたどる」では
// 「開く」ダイアログボックス、「栞をはさむ」では「名前を付けて保存」ダイア
// ログボックスが開き、栞を個別のファイルとして保存するモードになります。
// この場合は 保存可能な栞の個数に制限はありません。また、
// エクスプローラなどによる栞の管理が容易になります。
;freeSaveDataMode = true;



// ◆サムネイルを保存するか
// false を指定すると、セーブデータの拡張子は .kdt になり、サムネイルは
// 保存されません。
// true を指定すると、セーブデータの拡張子は .bmp になり、エクスプローラや
// 「開く」ダイアログボックスの「縮小版」表示でセーブ時点でのサムネイルを
// 表示することができるようになります。
;saveThumbnail = true;
;thumbnailWidth = 120;		//	サムネールの幅(高さは自動的に計算される)
;fullcolorThumbnail = true;	//	フルカラーで保存するか(ファイルサイズは大きい)

// ◆ セーブデータ保存場所
// ;saveDataLocation = "savedata";
// のように指定すると、吉里吉里の実行可能ファイルと同じフォルダ以下の
// savedata フォルダにデータが保存されます。
// ;saveDataLocation = System.personalPath + "吉里吉里の栞データ";
// ;saveDataLocation = System.appDataPath + "吉里吉里の栞データ";
// のように指定すると、ユーザごとのホームディレクトリ以下の
// "吉里吉里の栞データ" というフォルダのしたに データが保存されます。
// この場合は、例で示した "吉里吉里の栞データ" の部分は他のゲームなど
// と重ならない、十分にユニークな名前である必要があります。
// System.personalPath の場合は通常「マイ ドキュメント」フォルダ、
// System.appDataPath の場合は Application Data になります。
// また、フリーセーブモードであってもシステム変数やシステムの設定を
// 記録するためにこのセーブデータ保存場所の指定は必須です。
// 詳しくは KAG3 ドキュメントの「セーブデータに関して」を参照してください。
//;saveDataLocation = "savedata";
;saveDataLocation = "Fate_Savedata";
// 各ユーザーの、マイドキュメント\FataSavedataに保存される

// ◆ データ名プレフィクス
// ここで指定した名前で始まる名前で栞関連のファイルが作成されます。
// フリーセーブモードの場合でもシステム変数やシステムの設定を保存する
// ファイルに影響します。
;dataName = "data";


// ◆ データID
// KAGが他の作品のセーブデータを間違って読み込まないように、作品固有の
// IDを "" で囲って指定してください ( 何でもかまいません )。
// 特にフリーセーブモードで重要になります。フリーセーブモードにしない場合は
// それほど重要ではないです。
// 他と重ならない一意なIDは↓で取得することもできます。
// http://kikyou.info/uuidgen/uuidgen.php (出てきたIDをコピー&ペースト)
;saveDataID = "b62ad023-6533-4e1c-8a8b-35722af1a7cc";

// ◆ 保存モード
// "c" を指定すると栞が暗号化されます。
// "z" を指定すると栞が圧縮されます。
// "c" と "z" を両方指定することは出来ません。栞を圧縮すると
// 簡単には読めないようなデータになるので、栞の圧縮は暗号化を
// 兼ねています。
// "" を指定すると栞の暗号化や圧縮はされません。
;saveDataMode = "z";


// ◆ 栞にマクロの情報を保存するかどうか
// 栞にマクロの情報を保存するかどうかを指定します。true を指定すると、KAG の
// マクロの情報は栞に保存され、栞をたどる動作を行うと、栞を保存した状態のマ
// クロが再現されます。
// false を指定すると、KAG のマクロの情報は栞に保存されなく、栞をたどる動作
// を行っても、現在のマクロの情報は変わりません。
// 特に 毎回マクロ定義を 作品のはじめで行うような用途では、古いマクロの情報
// が栞の読み込みによって新しいマクロの情報に上書きされてしまうことが開発の
// 妨げになるため、false を指定した方がよいでしょう。
;saveMacros = false;



// ◆ 文字表示スピード (ミリ秒/文字)
;chSpeeds.fast = 10; // 「高速」文字表示スピード
;chSpeeds.normal = 30; // 「普通」文字表示スピード
;chSpeeds.slow = 50; // 「遅い」文字表示スピード

// ◆ 自動的に読み進むウェイト ページ末ウェイトの設定値 (ミリ秒)
;autoModePageWaits.fast = 400; // 「短い」
;autoModePageWaits.faster = 700; // 「やや短い」
;autoModePageWaits.medium = 1000; // 「普通」
;autoModePageWaits.slower = 1300; // 「やや遅い」
;autoModePageWaits.slow = 2000; // 「遅い」

// ◆ 自動的に読み進むウェイト [l] ウェイトの設定値 (ミリ秒)
;autoModeLineWaits.fast = 180; // 「短い」
;autoModeLineWaits.faster = 240; // 「やや短い」
;autoModeLineWaits.medium = 300; // 「普通」
;autoModeLineWaits.slower = 360; // 「やや遅い」
;autoModeLineWaits.slow = 500; // 「遅い」


// ◆ マウスカーソル
// マウスカーソルを指定します。マウスカーソルは cr で始まるマウスカーソル定
// 数 ( 吉里吉里２ SDK Help 参照 ) か、マウスカーソルファイル名である必要が
// あります。アニメーションマウスカーソルも指定できます。
// マウスカーソル定数を指定するときは、cursor タグで指定するように先頭に &
// をつける必要はありません。マウスカーソルファイル名を指定する場合は "" 
// (ダブルクオーテーション) でくくってください。
;cursorDefault = crArrow; // 通常のマウスカーソル
;cursorPointed = crHandPoint; // リンクなどをポイントしたとき
;cursorWaitingClick = crArrow; // クリック待ちの時
;cursorDraggable = crSizeAll; // メッセージレイヤをドラッグ可能なとき


// ◆ ラベル記録
// 自動的に「読んだ」ラベルを記録するかどうかを指定します。
// この設定が false でなく true になっていると、ラベルを読むごとにシステム
// 変数 (sf) に
// trail_シナリオファイル名_ラベル名
// という変数名の変数に 1 が加算されます。
// たとえば first.ks の *start というラベルであれば trail_first_start とい
// う変数名になります。まだ通過していないカ所では 未定義 ( 0 として見なされ
// ます ) になっています。
// 「読む」というのは、ラベルから、そのラベルの終了までをすべてシナリオが実
// 行されたときになって初めて「読んだ」とみなされます。
// 「ラベルの終了」とは、以下の場合に終了とされ、そのラベルは「読んだ」とさ
// れます。
//
// ・[s] タグやシナリオの終端に達した
// ・次のラベルが現れた
// ・jump タグでジャンプした
// ・link や button でのリンク先へのジャンプ
//    ( 文章を表示しきっていない場合でも リンク先へジャンプすると「読んだ」
//      と見なされるので注意; link や button タグの countpage 属性を参照 )
// ・return タグで戻るとき ( call で飛ぶときは終了とは見なされません )
;autoRecordPageShowing = true;

// ◆ 通過記録
// 通過記録を自動的に行うかどうかを指定します。
// ラベル記録とは違います。
// 通過記録を行うと、「システム - 前に戻る」で、直前に
// 通過記録を行った箇所に戻ることができます。
// 0 を指定すると自動的には通過記録を行いません ( record タグで手動で通過記
//   録を行うことはできます )
// 1 を指定すると 保存可能なラベルを通過するごとに自動的に通過記録を行いま
//   す。
// 2 を指定すると選択肢 ( s タグで停止 ) ごとに通過記録を行います。
//;recordHistoryOfStore = 2;
;recordHistoryOfStore = 0;

// ◆ 通過記録の最大数
// 通過記録の最大数を指定します。最大、ここで指定した回数、前に戻る事ができ
// ます。大きくするとセーブデータも大きくなります。
;maxHistoryOfStore = recordHistoryOfStore==0 ? 0 : 3;
//;maxHistoryOfStore = 100;	//	100ページ戻れる(スクリプティング用)


// ◆ quake の time 属性値
// true とすると quake の time 属性の単位が delay で指定した文字表示速度に
// 基づくようになります。false を指定すると ms (ミリ秒) 単位で指定すること
// になります。KAG 2.x 互換にするには true を指定してください。
;defaultQuakeTimeInChUnit = false;

// ◆ 利用可能な効果音バッファの数
// 利用可能な効果音バッファの最大値を指定します。つまり、ここで指定した数の
// 分だけ効果音を同時に再生できます。効果音を使用しない場合は 0 を指定して
// かまいません。
;numSEBuffers = 6;

// ◆ 初期状態の前景レイヤの数
// 必要なければ 0 を指定してかまいません。
// 数が多いと速度が低下したりメモリを消費しますので、必要以上に大きな数を指
// 定しない方が良いでしょう。
// laycount タグでシナリオ内でも変更できます。
;numCharacterLayers = 5;	//	立ち絵

// ◆ 前景レイヤの左右中心位置指定
// +---------+
// |         |
// | |  |  | |
// | |  |  | |
// +---------+
// image タグあるいは img タグの pos 属性で指定する前景レイヤの 位置名 (
// left や lecft_center など ) とそれぞれに対応する 中心位置 ( x 座標 ) を
// 指定します。;scPositionX.位置名 = 中心位置; の形式で指定します。
;scPositionX.left = 200;
;scPositionX.left_center = 300;
;scPositionX.center = 400;
;scPositionX.right_center = 500;
;scPositionX.right = 600;

// 簡易な記号
// ( pos 属性に指定する left, left_center, center, right_center, right を
//  それぞれ l, lc, c, rc, r でも指定できるように別名を定義します )
;scPositionX.l = scPositionX.left;
;scPositionX.lc = scPositionX.left_center;
;scPositionX.c = scPositionX.center;
;scPositionX.rc = scPositionX.right_center;
;scPositionX.r = scPositionX.right;

// ◆ 初期状態のメッセージレイヤの数
// 前景レイヤと違って、0 を指定することはできません。これも必要な数だけ確保
// するようにすべきです。laycount タグでシナリオ内でも変更できます。
;numMessageLayers = 1;

// ◆ 初期状態でメッセージレイヤを表示するかどうか
// true を指定するとメッセージレイヤ0が初期状態で表示状態になりますが、
// false を指定すると初期状態ではすべてのメッセージレイヤは初期状態で非表示
// になります。
;initialMessageLayerVisible = false;

// ◆ 利用可能な栞の数
// メニューに表示し、ユーザーが選択可能な栞の数です。
// save や load タグで保存可能な栞の数はこの設定には影響しません。
// メニューによる栞の管理を行わない場合 ( ゲーム画面中で全部栞の管理などを
// 行う場合など ) は、numBookMarks は必要な数に設定し、restoreMenu.visible と
// storeMenu.visible を false に設定してください。
;numBookMarks = 320;

// ◆ セーブデータの名前
;bookmarkName = "記憶";
;loadActionName = "をたど";
;loadActionNameLast = "らりるれろ";
;saveActionName = "を上書き";
;saveActionNameLast = "さしすせそ";


// ◆ 栞に日付を併記するか
// true に設定すると、栞メニューの項目の横に YY/MM/DD HH:MMの形式で栞を保存
// した日付・時刻が表示されます。
;showBookMarkDate = true;

// ◆ フォント選択で固定ピッチフォントのみを表示するか
// true を指定すると、フォント選択ウィンドウで固定ピッチフォントのみを表示
// するようになります。
;showFixedPitchOnlyInFontSelector = false;

// ◆ 「ヘルプ > 目次」を選択したときに実行するファイル
// ここで指定するファイルは吉里吉里実行可能ファイルと同じ場所に設置されてい
// なければなりません。
;helpFile = "readme.txt";


// ◆ 「ヘルプ > このソフトについて」を選択したときにでる
// ウィンドウの表示領域のサイズ
// このメニューを選択すると about.ks がそのウィンドウ内で実行されます。
;aboutWidth = 200; // 幅
;aboutHeight = 200; // 高さ


// ◆ ウィンドウや動作の追加の設定
// 追加の設定項目がある場合は
// [start-window-additionals] と [end-window-additionals] で囲まれた
// 部分に設定を記述してください
// ( [start-window-additionals] と [end-window-additionals] の行は
//  編集したり消したりしないでください )

//[start-window-additionals]

//[end-window-additionals]

}


//---------------------------------------------------- メニューの設定 -----

function Menu_visible_config()
{
// メニューの表示/非表示の設定
// true を指定すると表示され、false を指定すると非表示になります。
// メニューに表示するメニュー項目名については Menus.tjs を書き換えてくださ
// い。

// ◆ メニューバーを表示するか
// 非表示にすると当然どのメニュー項目にもアクセスできなくなります。
;menu.visible = true;

// ◆ 「システム > メッセージを消す」
// このメニュー項目を非表示にしてもマウスの右クリックでのメッセージの
// 非表示は引き続き有効です。
;rightClickMenuItem.visible = false;

// ◆ 「システム > メッセージ履歴の表示」
;showHistoryMenuItem.visible = false;

// ◆ 「システム > 次の選択肢/未読まで進む」または「次の選択肢まで進む」
;skipToNextStopMenuItem.visible = false;

// ◆ 「システム > 自動的に読み進む」
;autoModeMenuItem.visible = false;

// ◆ 「システム > 自動的に読み進むウェイト」
;autoModeWaitMenu.visible = false;

// ◆ 「システム > 前に戻る」
;goBackMenuItem.visible = false;

// ◆ 「システム > 最初に戻る」
;goToStartMenuItem.visible = true;

// ◆ 「文字表示」
;characterMenu.visible = false;

// ◆ 「文字表示 > 表示速度 > ページ末まで一気に」
// ユーザがこのメニュー項目をチェックすると、
// l タグが無視されるようになります。
;chNonStopToPageBreakItem.visible = true;

// ◆ 「文字表示 > 一度読んだところは」
;ch2ndSpeedMenu.visible = true;

// ◆ 「文字表示 > 一度読んだところは > ページ末まで一気に」
;ch2ndNonStopToPageBreakItem.visible = true;

// ◆ 「文字表示 > アンチエイリアス」
;chAntialiasMenuItem.visible = true;

// ◆ 「文字表示 > フォント」
;chChangeFontMenuItem.visible = true;

// ◆ 「栞をたどる」
;restoreMenu.visible = false;

// ◆ 「栞をはさむ」
;storeMenu.visible = false;

bookMarkMenu.visible = restoreMenu.visible | storeMenu.visible;

// ◆ 「画面」
;displayMenu.visible = true;

// ◆ 「ヘルプ」
;helpMenu.visible = true;

// ◆ 「ヘルプ > 目次 ...」
;helpIndexMenuItem.visible = false;

// ◆ 「ヘルプ > このソフトについて ...」
;helpAboutMenuItem.visible = true;

// ◆ 「デバッグ」
;debugMenu.visible = false;


// ◆ メニュー 追加の設定
// 追加の設定項目がある場合は
// [start-menu-additionals] と [end-menu-additionals] で囲まれた
// 部分に設定を記述してください
// ( [start-menu-additionals] と [end-menu-additionals] の行は
//  編集したり消したりしないでください )

//[start-menu-additionals]

//[end-menu-additionals]

}

//-------------------------------------------- メッセージレイヤの設定 -----

/*
 *	メッセージ領域は、26(+1)文字x13行で表示する
 */

function MessageLayer_config()
{
// ◆ メッセージ枠用の画像
// メッセージ枠用の画像のファイル名を指定します。
// "" を指定するとメッセージ枠の画像を使用しません。また、メッセージ枠用の
// 画像を指定した場合、position タグでメッセージレイヤのサイズを変更すると
// おかしな表示になると思います
;frameGraphic = "tw_ノーマル(通常)";  // position タグの frame 属性に相当


// ◆ メッセージレイヤの色と不透明度
// frameColor には 0xRRGGBB 形式で ( RR GG BB はそれぞれ 2 桁の 16 進数)
// メッセージレイヤの色を指定します。frameOpacity には 0 〜 255 の数値で、
// 不透明度を指定します。メッセージ枠用の画像が指定されている場合は無効で
// す。
;frameColor = 0x000000; // position タグの color 属性に相当
;frameOpacity = 64;  // position タグの opacity 属性に相当


// ◆ 左右上下マージン
// マージン (余白) を pixel 単位で指定します。メッセージ枠用の画像を指定し
// た場合は、メッセージ枠の表示範囲内に設定する必要があります。
// これらは、position タグの marginl, maringt, marginr, marginb 属性に対応
// します。

;marginL = 50; // 左余白
;marginT = 55; // 上余白
;marginR = 48; // 右余白
;marginB = 65; // 下余白
/*
;marginL = 20; // 左余白
;marginT = 2; // 上余白
;marginR = 18; // 右余白
;marginB = 9; // 下余白
*/

// ◆ 初期位置
// これらは、position タグのそれぞれ left top width height の属性に対応しま
// す。
;ml = 0;  // 左端位置
;mt = 0;  // 上端位置
;mw = 800-0;   // 幅
;mh = 600-0;   // 高さ
/*
;ml = 30;  // 左端位置
;mt = 15;  // 上端位置
;mw = 800-ml*2;   // 幅
;mh = 600-mt*2;   // 高さ
*/

// ◆ 自動改行/改ページ
// true を設定すると、行末での自動改行、ページ末での自動改ページが行われま
// す。false を設定するとこれらが行われない他、禁則処理等もされなくなりま
// す。
//	※ ツールでやっているから必要ない。
;defaultAutoReturn = true; 


// ◆ 可変ピッチ(プロポーショナル)フォントでも固定ピッチで表示するか？
// kag.showFixedPitchOnlyInFontSelectorが真でプロポーショナルフォントが選ばれており、
// 且つこのフラグが真のときにのみ有効です。
;displaysInFixedPitchAlsoByVariable	= true;


// ◆ 右文字マージン
// 禁則処理用にあけておく右端の文字数を指定します。
// (縦書きモードでは下端の文字数であると解釈されます)
;marginRCh = 1;


// ◆ 文字の大きさ
// デフォルトの文字の大きさ ( 高さ ) を pixel 単位で指定します。
;defaultFontSize = 27;  // deffont タグの size 属性に相当
// 26文字x13行設定

// ◆ 行間
// 行間を pixel 単位で指定します。
;defaultLineSpacing = 13; // defstyle タグの linespacing 属性に相当

// ◆ 字間
// 字間を pixel 単位で指定します。
// デフォルトは 0 で、正あるいは負のオフセットで指定します。
// 負の数値を指定すると時間が詰まります。正の数値を指定すると時間が空きま
// す。
;defaultPitch = 0; // defstyle タグの pitch 属性に相当


// ◆ 文字の書体
// デフォルトのフォント名を指定します。
// この設定はシステム変数に記録されて、次回起動時に引き継がれるので、
// userFace の設定を変更し、適用したい場合はシステム変数ファイル
// ?????sc.kdt の "chdefaultFace" => の行を削除してください。
// カンマで区切って複数のフォントを指定することができます。その場合は、最初
// の方に書いたフォントが存在すれば、優先されます。
;userFace = "ＭＳ ゴシック"; // deffont タグの face 属性に相当


// ◆ 文字の色
// デフォルトの文字の色を 0xRRGGBB 形式で指定します。
;defaultChColor = 0xffffff;  // deffont タグの color 属性に相当


// ◆ 文字をボールドにするか
// する場合は true, しない場合は false を指定します。
;defaultBold = false; // deffont タグの bold 属性に相当


// ◆ ルビサイズ
// ルビサイズを pixel 単位で指定します。
;defaultRubySize = 12; // deffont タグの rubysize に相当


// ◆ ルビ の表示オフセット
// 負の数を指定するとその pixel 数分、本文に近い位置に表示されます。
;defaultRubyOffset = -2; // deffont タグの rubyoffset に相当


// ◆ ルビをボールドにするか
;defaultRubyBold = false;

// ◆ アンチエイリアス文字描画をするか
// する場合は true, しない場合は false を指定します。
;defaultAntialiased = true;


// ◆ 影の色
// 影の色を 0xRRGGBB 形式で指定します。
;defaultShadowColor = 0x000000;  // deffont タグの shadowcolor に属性に相当

// ◆ 縁取りの色
// 縁取りの色を 0xRRGGBB 形式で指定します。
;defaultEdgeColor = 0x000000;  // deffont タグの edgecolor に属性に相当


// ◆ 影を描画するか
// する場合は true, しない場合は false を指定します。
;defaultShadow = false;  // deffont タグの shadow 属性に相当


// ◆ 縁取りをするか
// する場合は true, しない場合は false を指定します。KAG3 から、縁取りと影
// を同時に描画することができなくなりました。縁取りを指定した場合は縁取りが
// 優先されます。
;defaultEdge = true;  // deffont タグの edge 属性に相当


// ◆ クリック待ちグリフの画像ファイル
// 画像の作り方は、アニメーションレイヤ ( AnimationLayer.tjs ) 内を参照して
// ください。拡張子は指定しないでください。
// カラーキーを指定する必要がある場合はシナリオ中で glyph タグで指定してく
// ださい。

// 行末クリック待ちグリフ
;lineBreakGlyph = "LineBreak";  // glyph タグの line 属性に相当


// ページ末クリック待ちグリフ
;pageBreakGlyph = "PageBreak";  // glyph タグの page 属性に相当


// ◆ クリック待ちグリフを固定した場所に表示するかどうか
// false を指定すると、クリック待ち記号(グリフ)は、現在の文字表示位置に表示
// されます。true を指定すると、クリック待ち記号は、 glyphFixedLeft や
// glyphFixedTop で指定した位置に表示されます。
;glyphFixedPosition = false;  // glyph タグの fix 属性に相当



// ◆ クリック待ちグリフを固定した場所に表示するときの位置
// glyphFixedLeft にはグリフを表示する左端位置を、glyphFixedTop にはグリフ
// を表示する上端位置を指定してください。
;glyphFixedLeft = 0;  // glyph タグの left 属性に相当
;glyphFixedTop = 0;  // glyph タグの top 属性に相当




// ◆ リンクの強調色
// リンクを選択したときに出る半透明矩形のデフォルトの色です。
;defaultLinkColor = 0x0080ff;  // link タグの color 属性に相当


// ◆ リンクの不透明度
// リンクを選択したときに出る半透明矩形の不透明度です。
;defaultLinkOpacity = 64;


// ◆ 縦書きモード
// メッセージレイヤを標準で縦書きモードにする場合は false ではなく true を
// 指定してください。
;vertical = false;  // position タグの vertical 属性に相当


// ◆ マウスでドラッグ可能か
// true に設定すると、marginR, marginL, marginT, marginB で設定したマージン
// 外の部分で、かつフレーム画像の不透明度が 64 以上の箇所をマウスでつかんで
// メッセージレイヤをユーザが移動できるようになります。
;draggable = false;  // position タグの draggable 属性に相当


// ◆ メッセージレイヤ 追加の設定
// 追加の設定項目がある場合は
// [start-messagelayer-additionals] と [end-messagelayer-additionals] で囲
// まれた部分に設定を記述してください
// ( [start-messagelayer-additionals] と [end-messagelayer-additionals] の
// 行は編集したり消したりしないでください )

//[start-messagelayer-additionals]

//[end-messagelayer-additionals]

}

//-------------------------------------------------------- BGM の設定 -----


function BGM_config()
{
// BGM の設定です。
// CD-DA, Wave, MIDI のいずれかを BGM として再生することができます。

// ◆ BGM再生メディア
// type 変数に設定する文字列で、使用するサウンドバッファを決めることができ
// ます。
// "Wave"  : WaveSoundBuffer ( wav等(プラグインで再生できる物も含む) )
// "MIDI"  : MIDISoundBuffer ( mid,smf )
// "CDDA"  : CDDASoundBuffer ( cda )
;type = "Wave";


// ◆ CDDA再生ボリュームラベル
// "CDDA" を指定した場合は、cdVolume 変数に、再生する CD のボリュームラベル
// を指定します。ボリュームシリアル番号ではありません。
// KAG は、このボリュームラベルを持った CD の挿入された CD-ROM ドライブで
// CD-DA を再生します。特にマシンに複数のCD-ROMドライブが装着されている場合
// にこれを元にしてドライブの区別を行います。
;cdVolume = "xxxx";


// ◆ クロスフェードを行うか
// doubleBuffered 変数には、サウンドバッファを２つ使用するかどうかを指定し
// ます。true に設定するとサウンドバッファが 2 つ用意され、クロスフェードが
// 可能になります。
// MIDI サウンドバッファで複数同時再生を意図していないデータを使う場合や、
// CDDA サウンドバッファを使う場合は false に指定してください。
;doubleBuffered = true;


// ◆ MIDI 再生開始前に送るメッセージ
// MIDI データの再生を開始する前に MIDI 音源に送るメッセージです。
// <% %> を指定すると メッセージは送られません。
// <% f0 7e 7f 09 01 f7 ff 00 %> は GM System On です。
// ほかに
// <% f0 41 10 42 12 40 00 7f 00 41 f7 ff 00 %> GS reset
// <% f0 43 10 4c 00 00 7e 00 f7 ff 00 %> XG on
// など。
// ff 00 を途中に挿入するとその時点で 50ms のウェイトが入ります。
// 音源初期化などでウェイトが必要な場合に挿入します。
;midiInitialMessage = <% f0 7e 7f 09 01 f7 ff 00 %>;


// ◆ BGM 追加の設定
// 追加の設定項目がある場合は
// [start-bgm-additionals] と [end-bgm-additionals] で囲まれた
// 部分に設定を記述してください
// ( [start-bgm-additionals] と [end-bgm-additionals] の行は
//  編集したり消したりしないでください )

//[start-bgm-additionals]

//[end-bgm-additionals]

}

//---------------------------------------------- メッセージ履歴の設定 -----
/*
 *	上部に表示されるボタンの高さは18pixel
 */

function HistoryLayer_config()
{
// メッセージ履歴の設定です


// ◆ フォント名
;fontName = "ＭＳ 明朝";


// ◆ フォントを太字にするか
;fontBold = false;


// ◆ 左右上下マージン
;marginL = 50; // 左余白
;marginT = 68; // 上余白
;marginR = 48; // 右余白
;marginB = 49; // 下余白

// ◆ コントロール部の高さ
//;controlHeight	= 20;
;controlHeight	= 0;	//	コントロール部を左に寄せたので、高さは0になった。

// ◆ フォントのサイズ ( pixel単位)
;fontHeight = 27;


// ◆ ラインの高さ
;lineHeight = 40;


// ◆ 縦書きの場合は true
;verticalView = false;  // position タグの vertical 属性に相当


// ◆ ページ単位での閲覧を行うかどうか
// ページ単位での閲覧をするようになると
// cm ct er タグ、あるいは repage 属性が true の hr タグ
// でメッセージ履歴の改ページを行うようになります。
;everypage = true;


// ◆ 自動改行を行うかどうか
;autoReturn = true;



// ◆ 履歴保持最大数
// 「◆ ページ単位での閲覧を行うかどうか」を true に設定した場合は
// maxPages をページ単位で、false に設定した場合は maxLines を行単位で
// 指定してください。
;maxPages = 25;
;maxLines = 1000;


// ◆ 栞にメッセージ履歴を保存するか
// true を指定すると栞にメッセージ履歴が保存されるように
// なりますが、栞のデータサイズが大きくなります。
;storeState = true;


// ◆ メッセージ履歴 追加の設定
// 追加の設定項目がある場合は
// [start-historylayer-additionals] と [end-historylayer-additionals] で囲
// まれた部分に設定を記述してください
// ( [start-historylayer-additionals] と [end-historylayer-additionals] の行は
//  編集したり消したりしないでください )

//[start-historylayer-additionals]

//[end-historylayer-additionals]

}





// ---------
// このファイルのこれ以降は設定できる項目はありません


